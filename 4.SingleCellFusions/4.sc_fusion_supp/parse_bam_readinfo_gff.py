"""
Parse BAM from fusion contig generated by FusionInspector
Example output:
chr2    mm10    cDNA_match      136713454       136713600       .       +       .       read_id "ExcitNeuron:CCAATCCTCTTGCCGT:m64011_190201_222556/94831296/ccs.path1";
chr2    mm10    cDNA_match      136756068       136756201       .       +       .       read_id "ExcitNeuron:CCAATCCTCTTGCCGT:m64011_190201_222556/94831296/ccs.path1";
chr2    mm10    cDNA_match      136758311       136758352       .       +       .       read_id "ExcitNeuron:CCAATCCTCTTGCCGT:m64011_190201_222556/94831296/ccs.path1";
"""
import pysam
import os
import argparse
import glob
import pandas as pd


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--read", help="read gtf file")
    parser.add_argument("-g", "--gtf", help="reference gtf file")
    parser.add_argument("-t", "--target", default="NUTM2A-AS1--RP11-203L2.4", help="target fusion")
    parser.add_argument("-s", "--seqtype", default="long", help="target fusion")
    args = parser.parse_args()
    seq_type = args.seqtype

    target_fusion = args.target
    all_fusion_read_info = pd.read_table("../4a.sc_Melanoma/data/M132TS.melanoma_sc.filtered_cells_and_dedup_umis.tsv.gz")
    target_fusion_read_info = all_fusion_read_info.query("FusionName == @target_fusion").loc[:, ['cell_barcode', 'leiden', 'umi', 'read_name', 'rev_barcode']]
    read_to_leiden = target_fusion_read_info.loc[:, ['cell_barcode', 'leiden']].set_index("cell_barcode").T.to_dict('list')

    readstogenes = open(f"readstogenes_{seq_type}", "w")
    #samfile = pysam.AlignmentFile(args.bam, "rb")
    #for read in samfile.fetch(until_eof=True):
    read_gtf_file = open(args.read)
    for line in read_gtf_file:
        line = line.strip()
        if line == "": continue
        line = line.split('\t')
        if line[2] == "transcript": continue
        reference_name = line[0]
        reference_start = line[3]
        reference_end = line[4]
        strand = line[6]
        #if read.reference_name == target_fusion:
            #strand = "-" if read.is_reverse else "+"
        if reference_name == target_fusion:
            if seq_type == "short":
                #barcode = read.query_name.split("^")[0]
                #read_name = read.query_name.split("^")[-1]
                gene_id = line[-1].split(";")[0][8:].replace('"', '')
                barcode = gene_id.split("^")[0]
                read_name = gene_id.split("^")[-1]
            else:
                gene_id = line[-1].split(";")[0][8:].replace('"', '')
                read_name_list = target_fusion_read_info.read_name
                read_name = gene_id.split("^")[-1][:-5]
                #print(read_name)
                barcode = list(target_fusion_read_info.cell_barcode[read_name_list.isin([read_name])].values)
                #print(barcode)
                assert len(barcode) <= 1, f'more barcodes than expected {barcode}'
                if len(barcode) == 0:
                    continue
                barcode = barcode[0]

            if barcode in list(target_fusion_read_info.cell_barcode):
                cell_type = 'tumor' if read_to_leiden[barcode] in [[4], [7]] else 'normal'
                if cell_type == 'normal': continue
                print(f"{reference_name}\thg38\tcDNA_match\t{reference_start}\t{reference_end}\t.\t{strand}\t.\tread_id: \"{cell_type}:{barcode}:{read_name}\";")
                readstogenes.write(f"{cell_type}:{barcode}:{read_name}\t{target_fusion}\tfineRead\tfineGene\n")
            elif barcode in list(target_fusion_read_info.rev_barcode):
                cell_type = 'tumor' if read_to_leiden[barcode] in [[4], [7]] else 'normal'
                if cell_type == 'normal': continue
                print(f"{reference_name}\thg38\tcDNA_match\t{reference_start}\t{reference_end}\t.\t{strand}\t.\tread_id: \"{cell_type}:{barcode}:{read_name}\";")
                readstogenes.write(f"{cell_type}:{barcode}:{read_name}\t{target_fusion}\tfineRead\tfineGene\n")
            #else:
            #    raise Exception("Reads not found")
            #    print(read.query_name.split("^")[0])
            #    print(target_fusion_read_info.cell_barcode[:3])
    #samfile.close()
    read_gtf_file.close()
    readstogenes.close()

if __name__ == "__main__": main()
