# zoom in around breakpoints
min_right_breakpoint = min(df$RightLocalBreakpoint)
max_right_breakpoint = max(df$RightLocalBreakpoint)
min_left_breakpoint = min(df$LeftLocalBreakpoint)
max_left_breakpoint = max(df$LeftLocalBreakpoint)
padding = 0.25 * padding
## draw geneA (along X-axis)
geneA_minY = min_right_breakpoint - 0.95*padding
geneA_maxY = geneA_minY + 0.03* (max_right_breakpoint - min_right_breakpoint + 2*padding)
p2 = p + geom_rect(data=geneA_info, aes(xmin=lend, xmax=rend, ymin=geneA_minY, ymax=geneA_maxY), fill=NA, color='black', alpha=0.5)
geneA_midY = mean(c(geneA_minY, geneA_maxY))
p2 = p2 + geom_segment(data=geneA_info, aes(x=min_left_breakpoint-padding, xend=max_left_breakpoint+padding, y=geneA_midY, yend=geneA_midY), alpha=0.5) # geneB center line
## draw geneB (along Y-axis)
geneB_minX = min_left_breakpoint - 0.95*padding
geneB_maxX = geneB_minX + 0.03* (max_left_breakpoint - min_left_breakpoint + 2*padding)
p2 = p2 + geom_rect(data=geneB_info, aes(ymin=lend, ymax=rend, xmin=geneB_minX, xmax=geneB_maxX), fill=NA, color='black', alpha=0.5)
geneB_midX = mean(c(geneB_minX, geneB_maxX))
p2 = p2 + geom_segment(data=geneB_info, aes(x=geneB_midX, xend=geneB_midX, y=min_right_breakpoint-padding, yend=max_right_breakpoint+padding), alpha=0.5) # geneB center line
p2 = p2 + ylim(min_right_breakpoint-padding, max_right_breakpoint+padding) +
xlim(min_left_breakpoint-padding, max_left_breakpoint+padding)
plot(p2)
ret_plots[[3]] = p2
p2 = p2 + facet_wrap(~readtype)
plot(p2)
ret_plots[[4]] = p2
return(ret_plots)
}
plot_fusion_expression_by_breakpoint_incl_gene_structures("K562", "BCR--ABL1")
plots = plot_fusion_expression_by_breakpoint_incl_gene_structures("VCAP", "TMPRSS2--ERG")
ggsave(plots[[2]], file="depmap_VCaP_TMPRSS2--ERG_LR_vs_SR_isoforms.svg", width=9, height=6)
ggsave(plots[[4]], file="depmap_VCaP_TMPRSS2--ERG_LR_vs_SR_isoforms.zoomed.svg", width=9, height=6)
# has 1 isoform uniquely supported by long reads
plots = plot_fusion_expression_by_breakpoint_incl_gene_structures("SKBR3", "CYTH1--EIF3H")
ggsave(plots[[1]], file="depmap_SKBR3_CYTH1--EIF3H_LR_vs_SR_isoforms.svg", width=9, height=6)
ggsave(plots[[3]], file="depmap_SKBR3_CYTH1--EIF3H_LR_vs_SR_isoforms.zoomed.svg", width=6, height=4)
# save the structure fore the full-length view of each gene:
ggsave(plots[[1]] + xlim(800,1000) + theme_bw(), file="EIF3H_structure.svg", width=4)
cyth1_eif3h_cor_plot =  mult_isoform_data_both_read_types %>%
filter(fusion=="CYTH1--EIF3H") %>%
ggplot(aes(x=log10(LR_FFPM), y=log10(SR_FFPM))) +
theme_bw() +
geom_point(aes(color=fusion), size=rel(3), color='black') +
ggtitle("restricted to fusion genes w/ multi isoforms supported by both read types") +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
plots = plot_fusion_expression_by_breakpoint_incl_gene_structures("SKBR3", "TATDN1--GSDMB")
ggsave(plots[[2]], file="depmap_SKBR3_TATDN1--GSDMB_LR_vs_SR_isoforms.svg", width=9, height=6)
ggsave(plots[[4]], file="depmap_SKBR3_TATDN1--GSDMB_LR_vs_SR_isoforms.zoomed.svg", width=9, height=6)
# has 4 isoforms uniquely supported by SR
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
PROGS = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.4.0');
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(prog %in% PROGS)
fusion_preds$prog = factor(fusion_preds$prog, levels=PROGS)
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) +
theme_bw() +
geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 3 in MJ and as many aas 31 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 133 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F) %>%
filter(prog %in% PROGS)
scored_data$prog = factor(scored_data$prog, levels=PROGS)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) +
theme_bw() +
geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F)
data = data %>% filter(prog %in% PROGS)
data$prog = factor(data$prog, levels=PROGS)
data %>% head()
# F1 vs. min reads
depmap_accuracy_lineplot = data %>%
ggplot(aes(x=min_sum_frags, y=F1)) +
theme_bw() +
geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.4,0.85) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
#ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
# plot TP and FP ~ min sum frags.
depmap_TP_vs_FP_scatterplot  = data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
theme_bw() +
geom_point(aes(color=pred_class_type)) +
geom_line(aes(groups=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
#ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>% ggplot(aes(x=TPR, y=PPV)) +
theme_bw() +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog))
depmap_precision_recall_plot
#ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(prog %in% PROGS)
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) +
theme_bw() +
geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
#ggsave(depmap_cosmic_fusions_heatmap, file=paste0("depmap_cosmic_fusions_heatmap.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
library(UpSetRbyFeature)
truth_fusions_found = read.table(scored_predictions_file, sep="\t", header=T) %>%
filter(pred_result == "TP") %>%
select(prog, selected_fusion) %>% unique()
truth_fusions_found %>% select(selected_fusion) %>% unique() %>% nrow()
truth_fusions_found %>% group_by(prog) %>% tally() %>% arrange(desc(n))
truth_fusions_found_matrix = truth_fusions_found %>% mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
truth_fusion_names = truth_fusions_found_matrix%>% pull(selected_fusion)
truth_fusions_found_matrix =  truth_fusions_found_matrix %>% select(-selected_fusion)
truth_fusions_found_matrix = data.frame(truth_fusions_found_matrix)
rownames(truth_fusions_found_matrix) = truth_fusion_names
upset_plot = UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot
#pdf(file=paste0("depmap.upset_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
#UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
#dev.off()
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.1.IlluminaTruSeqDepMap9Lines")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# parse STAR-Fusion predictions based on Illumina reads
StarF_data = read.table("data/DepMap.v1v2mrgd.StarF.consolidated.tsv.gz", header=T, sep="\t", com='') %>%
rename(sample = X.sample, FusionName = X.FusionName)
StarF_data %>% head()
# process earlier long-read defined proxy truth set info:
earlier_truth_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set"
earlier_truth_set = read.table(earlier_truth_set_file, header=T, sep="\t") %>% mutate(type='shared')
earlier_truth_set = earlier_truth_set  %>% rowwise() %>% mutate(sample = str_split(proxy_fusion_name, "\\|")[[1]][1])
earlier_truth_set = earlier_truth_set %>% rowwise() %>% mutate(FusionName = str_split(proxy_fusion_name, "\\|")[[1]][2])
earlier_truth_set = earlier_truth_set %>% rowwise() %>% mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
# unique set
earlier_unique_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.unique_set"
earlier_unique_set = read.table(earlier_unique_set_file, header=T, sep="\t") %>% mutate(type='unique')
earlier_unique_set = earlier_unique_set  %>% rowwise() %>% mutate(sample = str_split(proxy_fusion_name, "\\|")[[1]][1])
earlier_unique_set = earlier_unique_set %>% rowwise() %>% mutate(FusionName = str_split(proxy_fusion_name, "\\|")[[1]][2])
earlier_unique_set = earlier_unique_set %>% rowwise() %>% mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
all_pred_fusions = bind_rows(earlier_truth_set, earlier_unique_set)
all_pred_fusions = all_pred_fusions %>% select(lex_ordered_fusion_name, type) %>% unique()
message("num shared fusions: ", earlier_truth_set %>% select(lex_ordered_fusion_name) %>% unique() %>% nrow() )
message("num unique fusions:", earlier_unique_set %>% select(lex_ordered_fusion_name) %>% unique() %>% nrow() )
# add lex_ordered_fusion_name as attribute to STARF data
StarF_data = StarF_data %>% rowwise() %>%
mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
# define those fusions in the truth set as illumina-supported or not.
all_pred_fusions_illum_support_indicated = all_pred_fusions %>%
mutate(Illumina_support = (lex_ordered_fusion_name %in% StarF_data$lex_ordered_fusion_name))
all_pred_fusions_illum_support_indicated_summary = all_pred_fusions_illum_support_indicated %>%
select(lex_ordered_fusion_name, type, Illumina_support) %>% unique() %>%
group_by(type, Illumina_support) %>% tally()
all_pred_fusions_illum_support_indicated_summary
# 79 shared and 12 unique have illumina support
# the uniquely predicted fusions supported by Illumina
all_pred_fusions_illum_support_indicated %>% filter(type=='unique' & Illumina_support) %>% arrange(lex_ordered_fusion_name)
StarF_overlapping_preds = inner_join(all_pred_fusions_illum_support_indicated, StarF_data, by='lex_ordered_fusion_name', multiple='all')
StarF_overlapping_preds = StarF_overlapping_preds %>% select(lex_ordered_fusion_name, type, sample, FusionName) %>% unique()
StarF_overlapping_preds
# all Illumina supported ones
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('lex_ordered_fusion_name',
'type')
) %>% filter(type=='shared')
StarF_overlapping_preds = StarF_overlapping_preds %>% rowwise() %>%
mutate(proxy_fusion_name = paste0(sample, "|", FusionName)) %>%
select(proxy_fusion_name, type, sample, FusionName, lex_ordered_fusion_name) %>% unique()
StarF_overlapping_preds
# combining shared and uniquely pred fusions w/ illum support
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('lex_ordered_fusion_name','type')
)
StarF_overlapping_preds %>% filter(type=="shared")
StarF_overlapping_preds %>% filter(type=="shared") %>% group_by(lex_ordered_fusion_name) %>% tally() %>% filter(n>1)
StarF_overlapping_preds %>% filter(type=="unique")
# 12 of the uniquely pred fusions have illumina support
write.table(StarF_overlapping_preds,
file="StarFusion_Illumina_supported_fusions.tsv", sep="\t", row.names=F, quote=F)
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
PROGS = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.4.0');
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(prog %in% PROGS)
fusion_preds$prog = factor(fusion_preds$prog, levels=PROGS)
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) +
theme_bw() +
geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 3 in MJ and as many aas 31 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 133 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F) %>%
filter(prog %in% PROGS)
scored_data$prog = factor(scored_data$prog, levels=PROGS)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) +
theme_bw() +
geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F)
data = data %>% filter(prog %in% PROGS)
data$prog = factor(data$prog, levels=PROGS)
data %>% head()
# F1 vs. min reads
depmap_accuracy_lineplot = data %>%
ggplot(aes(x=min_sum_frags, y=F1)) +
theme_bw() +
geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.4,0.85) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
#ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
# plot TP and FP ~ min sum frags.
depmap_TP_vs_FP_scatterplot  = data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
theme_bw() +
geom_point(aes(color=pred_class_type)) +
geom_line(aes(groups=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
#ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>% ggplot(aes(x=TPR, y=PPV)) +
theme_bw() +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog))
depmap_precision_recall_plot
#ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(prog %in% PROGS)
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) +
theme_bw() +
geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
#ggsave(depmap_cosmic_fusions_heatmap, file=paste0("depmap_cosmic_fusions_heatmap.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
library(UpSetRbyFeature)
truth_fusions_found = read.table(scored_predictions_file, sep="\t", header=T) %>%
filter(pred_result == "TP") %>%
select(prog, selected_fusion) %>% unique()
truth_fusions_found %>% select(selected_fusion) %>% unique() %>% nrow()
truth_fusions_found %>% group_by(prog) %>% tally() %>% arrange(desc(n))
truth_fusions_found_matrix = truth_fusions_found %>% mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
truth_fusion_names = truth_fusions_found_matrix%>% pull(selected_fusion)
truth_fusions_found_matrix =  truth_fusions_found_matrix %>% select(-selected_fusion)
truth_fusions_found_matrix = data.frame(truth_fusions_found_matrix)
rownames(truth_fusions_found_matrix) = truth_fusion_names
upset_plot = UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot
#pdf(file=paste0("depmap.upset_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
#UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
#dev.off()
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.2.IncludeIlluminaSupportedFusions")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
PROGS = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.4.0');
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(prog %in% PROGS)
fusion_preds$prog = factor(fusion_preds$prog, levels=PROGS)
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) +
theme_bw() +
geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 3 in MJ and as many as 33 in VCaP (including Illumina support!)
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 133 min2 + 12 Illumina-supported-unique = 145 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F)  %>%
filter(prog %in% PROGS)
scored_data$prog = factor(scored_data$prog, levels=PROGS)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) +
theme_bw() +
geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F)
data = data %>% filter(prog %in% PROGS)
data$prog = factor(data$prog, levels=PROGS)
data %>% head()
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
progs = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.4.0');
depmap_accuracy_lineplot = data %>%
filter(prog %in% progs ) %>%
mutate(prog = factor(prog, levels=progs)) %>%
ggplot(aes(x=min_sum_frags, y=F1)) +
theme_bw() +
geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.45,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
depmap_TP_vs_FP_scatterplot = data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
theme_bw() +
geom_point(aes(groups=pred_class_type, color=pred_class_type)) +
geom_line(aes(color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>%
ggplot(aes(x=TPR, y=PPV)) +
theme_bw() +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog)) +
xlab("Recall") + ylab("Precision")
depmap_precision_recall_plot
ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) +
theme_bw() +
geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
ggsave(depmap_cosmic_fusions_heatmap, file=paste0("depmap_cosmic_fusions_heatmap.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
library(UpSetRbyFeature)
truth_fusions_found = read.table(scored_predictions_file, sep="\t", header=T) %>%
filter(pred_result == "TP") %>%
select(prog, selected_fusion) %>% unique()
truth_fusions_found %>% select(selected_fusion) %>% unique() %>% nrow()
truth_fusions_found %>% group_by(prog) %>% tally() %>% arrange(desc(n))
truth_fusions_found_matrix = truth_fusions_found %>%
filter(prog %in% progs) %>%
mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
truth_fusion_names = truth_fusions_found_matrix%>% pull(selected_fusion)
truth_fusions_found_matrix =  truth_fusions_found_matrix %>% select(-selected_fusion)
truth_fusions_found_matrix = data.frame(truth_fusions_found_matrix)
rownames(truth_fusions_found_matrix) = truth_fusion_names
upset_plot = UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot
pdf(file=paste0("depmap.upset_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
UpSetRbyFeature::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
dev.off()
library(UpSetR)
upset_plot_basic = UpSetR::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot_basic
pdf(file=paste0("depmap.upset_plot-basic.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
UpSetR::upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
dev.off()
