cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
cyth1_eif3h_cor_plot =  mult_isoform_data_both_read_types %>%
filter(fusion=="CYTH1--EIF3H") %>%
ggplot(aes(x=log10(LR_FFPM), y=log10(SR_FFPM))) + geom_point(aes(color=fusion, size=LR_FFPM)) +
ggtitle("restricted to fusion genes w/ multi isoforms supported by both read types") +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
cyth1_eif3h_cor_plot =  mult_isoform_data_both_read_types %>%
filter(fusion=="CYTH1--EIF3H") %>%
ggplot(aes(x=log10(LR_FFPM), y=log10(SR_FFPM))) + geom_point(aes(color=fusion), size=rel(2)) +
ggtitle("restricted to fusion genes w/ multi isoforms supported by both read types") +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
cyth1_eif3h_cor_plot =  mult_isoform_data_both_read_types %>%
filter(fusion=="CYTH1--EIF3H") %>%
ggplot(aes(x=log10(LR_FFPM), y=log10(SR_FFPM))) + geom_point(aes(color=fusion), size=rel(3)) +
ggtitle("restricted to fusion genes w/ multi isoforms supported by both read types") +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
cyth1_eif3h_cor_plot =  mult_isoform_data_both_read_types %>%
filter(fusion=="CYTH1--EIF3H") %>%
ggplot(aes(x=log10(LR_FFPM), y=log10(SR_FFPM))) + geom_point(aes(color=fusion), size=rel(3), color='black') +
ggtitle("restricted to fusion genes w/ multi isoforms supported by both read types") +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
cyth1_eif3h_cor_plot
ggsave(cyth1_eif3h_cor_plot, file="cyth1_eif3h_LR_SR_correlation_plot.svg", width=5, height=4)
setwd("/Users/bhaas/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.2.IncludeIlluminaSupportedFusions")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
truth_fusions_found_matrix = truth_fusions_found %>% filter(prog %in% progs) %>% mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 2 in MJ and as many aas 31 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 115 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
# pbfusion v0.4.0 isn't part of the main paper (came out later)
p_fusion_counts_barplot = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1')) %>%
mutate(prog = factor(prog, levels=c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1'))) %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(2,10) +
#ylim(0.3,0.9) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
progs = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1');
depmap_accuracy_lineplot = data %>%
filter(prog %in% progs ) %>%
mutate(prog = factor(prog, levels=progs)) %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.4,1) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
data %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', "JAFFAL")) %>%
select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
geom_point(aes(shape=pred_class_type, color=prog)) +
geom_line(aes(groups=pred_class_type, shape=pred_class_type, color=prog)) +
xlim(3,15)
# precision / recall
data %>% ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog))
# exclude pbfusion v0.4.0
depmap_TP_vs_FP_scatterplot = data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog)) +
xlab("Recall") + ylab("Precision")
depmap_precision_recall_plot
ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
ggsave(depmap_cosmic_fusions_heatmap, file=paste0("depmap_cosmic_fusions_heatmap.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
library(UpSetRbyFeature)
truth_fusions_found = read.table(scored_predictions_file, sep="\t", header=T) %>%
filter(pred_result == "TP") %>%
select(prog, selected_fusion) %>% unique()
truth_fusions_found %>% select(selected_fusion) %>% unique() %>% nrow()
truth_fusions_found %>% group_by(prog) %>% tally() %>% arrange(desc(n))
truth_fusions_found_matrix = truth_fusions_found %>%
filter(prog %in% progs) %>%
mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
truth_fusion_names = truth_fusions_found_matrix%>% pull(selected_fusion)
truth_fusions_found_matrix =  truth_fusions_found_matrix %>% select(-selected_fusion)
truth_fusions_found_matrix = data.frame(truth_fusions_found_matrix)
rownames(truth_fusions_found_matrix) = truth_fusion_names
upset_plot = upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot
pdf(file=paste0("depmap.upset_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
dev.off()
# which are ctatLRF missing?
truth_fusions_found_matrix  %>% filter(JAFFAL==1 & ctat.LR.fusion.v0.13.0 == 0)
```{r}
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(prog %in% progs) %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 2 in MJ and as many aas 31 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 115 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
# pbfusion v0.4.0 isn't part of the main paper (came out later)
p_fusion_counts_barplot = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1')) %>%
mutate(prog = factor(prog, levels=c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1'))) %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(2,10) +
#ylim(0.3,0.9) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
progs = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1');
depmap_accuracy_lineplot = data %>%
filter(prog %in% progs ) %>%
mutate(prog = factor(prog, levels=progs)) %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.4,1) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
data %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', "JAFFAL")) %>%
select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
geom_point(aes(shape=pred_class_type, color=prog)) +
geom_line(aes(groups=pred_class_type, shape=pred_class_type, color=prog)) +
xlim(3,15)
# precision / recall
data %>% ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog))
# exclude pbfusion v0.4.0
depmap_TP_vs_FP_scatterplot = data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog)) +
xlab("Recall") + ylab("Precision")
depmap_precision_recall_plot
ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(prog %in% progs) %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
USE_PARALOG_PROXIES = FALSE
if (USE_PARALOG_PROXIES) {
# or allow for paralogs as proxies:
scored_predictions_file = "data/min_2.okPara_ignoreUnsure.results.scored"
} else {
scored_predictions_file = "data/min_2.ignoreUnsure.results.scored"
}
ROC_file = paste0(scored_predictions_file, ".ROC")
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 2 in MJ and as many aas 31 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 115 proxy truth fusions
p_fusion_counts_barplot = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
# pbfusion v0.4.0 isn't part of the main paper (came out later)
p_fusion_counts_barplot = fusion_preds %>%
select(sample, prog, fusion) %>% unique() %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1')) %>%
mutate(prog = factor(prog, levels=c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1'))) %>%
group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p_fusion_counts_barplot
ggsave(p_fusion_counts_barplot, file="depmap_fusion_counts_per_prog.barplot.svg", width=7, height=5)
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table(scored_predictions_file, header=T, sep="\t", stringsAsFactors = F)
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table(ROC_file, header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(2,10) +
#ylim(0.3,0.9) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
progs = c('ctat-LR-fusion.v0.13.0', 'JAFFAL', 'LongGF', 'fusionseeker', 'pbfusion_v0.3.1');
depmap_accuracy_lineplot = data %>%
filter(prog %in% progs ) %>%
mutate(prog = factor(prog, levels=progs)) %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.4,1) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
depmap_accuracy_lineplot
ggsave(depmap_accuracy_lineplot, file=paste0("depmap_accuracy_lineplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=4)
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
data %>%
filter(prog %in% c('ctat-LR-fusion.v0.13.0', "JAFFAL")) %>%
select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) +
geom_point(aes(shape=pred_class_type, color=prog)) +
geom_line(aes(groups=pred_class_type, shape=pred_class_type, color=prog)) +
xlim(3,15)
# precision / recall
data %>% ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog))
# exclude pbfusion v0.4.0
depmap_TP_vs_FP_scatterplot = data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
depmap_TP_vs_FP_scatterplot
ggsave(depmap_TP_vs_FP_scatterplot, file=paste0("depmap_TP_vs_FP_scatterplot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
# precision / recall
depmap_precision_recall_plot = data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=TPR, y=PPV)) +
geom_point(aes(groups=prog, color=prog)) +
geom_line(aes(color=prog)) +
xlab("Recall") + ylab("Precision")
depmap_precision_recall_plot
ggsave(depmap_precision_recall_plot, file=paste0("depmap_precision_recall_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=5, height=3)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
depmap_cosmic_fusions_heatmap =   cosmic_fusion_preds %>%
filter(prog %in% progs) %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
depmap_cosmic_fusions_heatmap
ggsave(depmap_cosmic_fusions_heatmap, file=paste0("depmap_cosmic_fusions_heatmap.use_paralog_proxies=", USE_PARALOG_PROXIES, ".svg"), width=7, height=5)
library(UpSetRbyFeature)
truth_fusions_found = read.table(scored_predictions_file, sep="\t", header=T) %>%
filter(pred_result == "TP") %>%
select(prog, selected_fusion) %>% unique()
truth_fusions_found %>% select(selected_fusion) %>% unique() %>% nrow()
truth_fusions_found %>% group_by(prog) %>% tally() %>% arrange(desc(n))
truth_fusions_found_matrix = truth_fusions_found %>%
filter(prog %in% progs) %>%
mutate(found = 1) %>% spread(key=prog, value=found, fill=0)
truth_fusion_names = truth_fusions_found_matrix%>% pull(selected_fusion)
truth_fusions_found_matrix =  truth_fusions_found_matrix %>% select(-selected_fusion)
truth_fusions_found_matrix = data.frame(truth_fusions_found_matrix)
rownames(truth_fusions_found_matrix) = truth_fusion_names
upset_plot = upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
upset_plot
pdf(file=paste0("depmap.upset_plot.use_paralog_proxies=", USE_PARALOG_PROXIES, ".pdf"), width=20)
upset(truth_fusions_found_matrix, number.angles=90, nsets=1000, nintersects=1000)
dev.off()
