filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# exclude pbfusion v0.4.0
data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>% group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 4 in MJ and as many aas 34 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 150 proxy truth fusions
p2 = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p2
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table("data/min_2.okPara_ignoreUnsure.results.scored", header=T, sep="\t", stringsAsFactors = F)
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
scored_data = scored_data %>% mutate(sample = ifelse(sample=="HCC38", "DMS53", sample))
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table("data/min_2.okPara_ignoreUnsure.results.scored.ROC", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
# exclude pbfusion v0.4.0
data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.2.IncludeIlluminaSupportedFusions")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>% group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
truth_data = truth_data %>% mutate(sample_name = ifelse(sample_name=="HCC38", "DMS53", sample_name))
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts
p2 = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p2
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table("data/min_2.okPara_ignoreUnsure.results.scored", header=T, sep="\t", stringsAsFactors = F)
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
scored_data = scored_data %>% mutate(sample = ifelse(sample=="HCC38", "DMS53", sample))
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table("data/min_2.okPara_ignoreUnsure.results.scored.ROC", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
# F1 vs. min reads
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.1.IlluminaTruSeqDepMap9Lines")
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.1.IlluminaTruSeqDepMap9Lines")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# parse STAR-Fusion predictions based on Illumina reads
StarF_data = read.table("data/DepMap.v1v2mrgd.StarF.consolidated.tsv.gz", header=T, sep="\t", com='') %>%
rename(sample = X.sample, FusionName = X.FusionName)
StarF_data %>% head()
# process earlier long-read defined proxy truth set info:
earlier_truth_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set"
earlier_truth_set = read.table(earlier_truth_set_file, header=T, sep="\t") %>% mutate(type='shared')
earlier_unique_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.unique_set"
earlier_unique_set = read.table(earlier_unique_set_file, header=T, sep="\t") %>% mutate(type='unique')
all_pred_fusions = bind_rows(earlier_truth_set, earlier_unique_set)
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(sample = str_split(proxy_fusion_name, "\\|")[[1]][1])
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(FusionName = str_split(proxy_fusion_name, "\\|")[[1]][2])
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
all_pred_fusions = all_pred_fusions %>% select(lex_ordered_fusion_name, type)
message("num shared fusions: ", nrow(earlier_truth_set))
message("num unique fusions:", nrow(earlier_unique_set))
# add lex_ordered_fusion_name as attribute to STARF data
StarF_data = StarF_data %>% rowwise() %>%
mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
# define those fusions in the truth set as illumina-supported or not.
all_pred_fusions_illum_support_indicated = all_pred_fusions %>% mutate(Illumina_support = (lex_ordered_fusion_name %in% StarF_data$lex_ordered_fusion_name))
all_pred_fusions_illum_support_indicated_summary = all_pred_fusions_illum_support_indicated %>%
select(lex_ordered_fusion_name, type, Illumina_support) %>% unique() %>%
group_by(type, Illumina_support) %>% tally()
all_pred_fusions_illum_support_indicated_summary
# 76 shared and 17 unique have illumina support
StarF_overlapping_preds = inner_join(all_pred_fusions_illum_support_indicated, StarF_data, by='lex_ordered_fusion_name', multiple='all')
StarF_overlapping_preds = StarF_overlapping_preds %>% select(lex_ordered_fusion_name, type, sample, FusionName) %>% unique()
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('lex_ordered_fusion_name',
'type')
) %>% filter(type=='shared')
StarF_overlapping_preds = StarF_overlapping_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste0(sample, "|", FusionName)) %>%
select(proxy_fusion_name, type, sample, FusionName) %>% unique()
StarF_overlapping_preds
# combining shared and uniquely pred fusions w/ illum support
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('proxy_fusion_name'='lex_ordered_fusion_name',
'type')
)
StarF_overlapping_preds %>% filter(type=="shared")
StarF_overlapping_preds %>% filter(type=="unique")
# 17 of the uniquely pred fusions have illumina support
write.table(StarF_overlapping_preds,
file="StarFusion_Illumina_supported_fusions.tsv", sep="\t", row.names=F, quote=F)
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.2.IncludeIlluminaSupportedFusions")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>% group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
truth_data = truth_data %>% mutate(sample_name = ifelse(sample_name=="HCC38", "DMS53", sample_name))
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts
p2 = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p2
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table("data/min_2.okPara_ignoreUnsure.results.scored", header=T, sep="\t", stringsAsFactors = F)
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
scored_data = scored_data %>% mutate(sample = ifelse(sample=="HCC38", "DMS53", sample))
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table("data/min_2.okPara_ignoreUnsure.results.scored.ROC", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>% group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts %>% arrange(num_truth_fusions)
# as few as 4 in MJ and as many aas 34 in VCaP
truth_data_counts %>% summarise(sum_truth_fusions = sum(num_truth_fusions))
# 150 proxy truth fusions
p2 = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p2
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table("data/min_2.okPara_ignoreUnsure.results.scored", header=T, sep="\t", stringsAsFactors = F)
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
scored_data = scored_data %>% mutate(sample = ifelse(sample=="HCC38", "DMS53", sample))
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table("data/min_2.okPara_ignoreUnsure.results.scored.ROC", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
# exclude pbfusion v0.4.0
data %>% select(prog, min_sum_frags, TP, FP) %>%
filter(prog != "pbfusion_v0.4.0") %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
unfiltered_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.gz", header=T, sep="\t") %>%
filter(! grepl("flair", prog))
unfiltered_preds = unfiltered_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste(sort(str_split(fusion, "--")[[1]]), collapse="--"))
unfiltered_preds %>% head()
unfiltered_preds = unfiltered_preds %>% mutate(proxy_fusion_name = paste(sample, proxy_fusion_name, sep ="|"))
unfiltered_preds %>% head()
cosmic_fusions = unfiltered_preds %>% filter(grepl("Cosmic", annots)) %>% select(sample, proxy_fusion_name) %>% unique()
cosmic_fusions
cosmic_fusion_preds= left_join(cosmic_fusions,
unfiltered_preds %>% select(proxy_fusion_name, prog, num_reads),
by='proxy_fusion_name') %>%
# select only top-supported breakpoint entry, just in case.
group_by(sample, proxy_fusion_name, prog) %>%
arrange(desc(num_reads)) %>% filter(row_number() == 1) %>% ungroup()
cosmic_fusion_preds
# limit to those found by at least 2 of the methods
cosmic_fusion_preds_mult_methods = cosmic_fusion_preds %>% select(proxy_fusion_name, prog) %>% unique() %>%
group_by(proxy_fusion_name) %>% tally() %>% filter(n>1) %>% pull(proxy_fusion_name)
cosmic_fusion_preds_mult_methods
cosmic_fusion_preds %>%
filter(proxy_fusion_name %in% cosmic_fusion_preds_mult_methods) %>%
ggplot(aes(x=proxy_fusion_name, y=prog)) + geom_tile(aes(fill=num_reads)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_continuous(high = "#132B43", low = "#56B1F7", na.value="white") +
geom_text(aes(label=num_reads), color='white')
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# F1 vs. min reads
# exclude pbfusion v0.4.0 for the paper fig
data %>%
filter(prog != "pbfusion_v0.4.0") %>%
ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.1.IlluminaTruSeqDepMap9Lines")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# parse STAR-Fusion predictions based on Illumina reads
StarF_data = read.table("data/DepMap.v1v2mrgd.StarF.consolidated.tsv.gz", header=T, sep="\t", com='') %>%
rename(sample = X.sample, FusionName = X.FusionName)
StarF_data %>% head()
# process earlier long-read defined proxy truth set info:
earlier_truth_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set"
earlier_truth_set = read.table(earlier_truth_set_file, header=T, sep="\t") %>% mutate(type='shared')
earlier_unique_set_file = "../data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.unique_set"
earlier_unique_set = read.table(earlier_unique_set_file, header=T, sep="\t") %>% mutate(type='unique')
all_pred_fusions = bind_rows(earlier_truth_set, earlier_unique_set)
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(sample = str_split(proxy_fusion_name, "\\|")[[1]][1])
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(FusionName = str_split(proxy_fusion_name, "\\|")[[1]][2])
all_pred_fusions = all_pred_fusions %>% rowwise() %>% mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
all_pred_fusions = all_pred_fusions %>% select(lex_ordered_fusion_name, type)
message("num shared fusions: ", nrow(earlier_truth_set))
message("num unique fusions:", nrow(earlier_unique_set))
# add lex_ordered_fusion_name as attribute to STARF data
StarF_data = StarF_data %>% rowwise() %>%
mutate(lex_ordered_fusion_name = paste0(sample, "|", paste0(collapse="--", sort(str_split(FusionName, "--")[[1]]))))
# define those fusions in the truth set as illumina-supported or not.
all_pred_fusions_illum_support_indicated = all_pred_fusions %>% mutate(Illumina_support = (lex_ordered_fusion_name %in% StarF_data$lex_ordered_fusion_name))
all_pred_fusions_illum_support_indicated_summary = all_pred_fusions_illum_support_indicated %>%
select(lex_ordered_fusion_name, type, Illumina_support) %>% unique() %>%
group_by(type, Illumina_support) %>% tally()
all_pred_fusions_illum_support_indicated_summary
# 76 shared and 17 unique have illumina support
StarF_overlapping_preds = inner_join(all_pred_fusions_illum_support_indicated, StarF_data, by='lex_ordered_fusion_name', multiple='all')
StarF_overlapping_preds = StarF_overlapping_preds %>% select(lex_ordered_fusion_name, type, sample, FusionName) %>% unique()
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('lex_ordered_fusion_name',
'type')
) %>% filter(type=='shared')
StarF_overlapping_preds = StarF_overlapping_preds %>% rowwise() %>% mutate(proxy_fusion_name = paste0(sample, "|", FusionName)) %>%
select(proxy_fusion_name, type, sample, FusionName) %>% unique()
StarF_overlapping_preds
# combining shared and uniquely pred fusions w/ illum support
full_join(StarF_overlapping_preds,
all_pred_fusions_illum_support_indicated %>% filter(Illumina_support),
by=c('proxy_fusion_name'='lex_ordered_fusion_name',
'type')
)
StarF_overlapping_preds %>% filter(type=="shared")
StarF_overlapping_preds %>% filter(type=="unique")
# 17 of the uniquely pred fusions have illumina support
write.table(StarF_overlapping_preds,
file="StarFusion_Illumina_supported_fusions.tsv", sep="\t", row.names=F, quote=F)
setwd("~/BroadInstProjs/CTAT-LR-Fusion-Paper/github.CTAT-LRF-Paper/3.DepMap9Lines/3b.DepMap9Lines_Benchmarking/3b.2.IncludeIlluminaSupportedFusions")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
fusion_preds = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
fusion_preds %>% head()
p = fusion_preds %>% group_by(sample, prog) %>% tally(name='num_fusions') %>%
ggplot(aes(x=prog, y=num_fusions)) + geom_col(aes(fill=prog)) + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
# get num truth counts (min 2 agree)
truth_data = read.table("data/preds.collected.gencode_mapped.wAnnot.filt.pass.proxy_assignments.byProgAgree.min_2.truth_set",
header=T, sep="\t", stringsAsFactors = F)
truth_data %>% head()
truth_data$sample_name = sapply(truth_data$proxy_fusion_name, function(x) { str_split(x, "\\|")[[1]][1]})
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
truth_data = truth_data %>% mutate(sample_name = ifelse(sample_name=="HCC38", "DMS53", sample_name))
head(truth_data)
truth_data_counts = truth_data %>% rename(sample=sample_name) %>% group_by(sample) %>% tally(name='num_truth_fusions')
truth_data_counts
p2 = p + geom_hline(data=truth_data_counts, aes(yintercept=num_truth_fusions))
p2
# unnest prog names
truth_data = truth_data %>% mutate(prog_names = str_split(prog_names, ","))  %>% unnest(prog_names)
truth_data %>% head()
#Organize according to pred class
scored_data = read.table("data/min_2.okPara_ignoreUnsure.results.scored", header=T, sep="\t", stringsAsFactors = F)
# from Kirsty:
#   Just to confirm that the 9th cell line (HCC38) - has been corrected to DMS53 (ACH-000698).
scored_data = scored_data %>% mutate(sample = ifelse(sample=="HCC38", "DMS53", sample))
scored_data %>% head()
scored_data %>% filter(pred_result %in% c("TP", "FP", "FN")) %>%
group_by(sample, prog, pred_result) %>%
tally(name='fusion_counts') %>%
ggplot(aes(x=prog, y=fusion_counts, fill=factor(pred_result, levels=c('FP', 'TP', 'FN')))) + geom_col() + facet_wrap(~sample)  +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data = read.table("data/min_2.okPara_ignoreUnsure.results.scored.ROC", header=T, sep="\t", stringsAsFactors = F) %>%
filter(! grepl("flair", prog))
data %>% head()
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,15) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,15)
# F1 vs. min reads
data %>% ggplot(aes(x=min_sum_frags, y=F1)) + geom_point(aes(color=prog)) + geom_line(aes(group=prog, color=prog)) +
xlim(3,10) + ylim(0.3,0.8) +
ggtitle("Depmap v1 fusions: F1 ~ min read support")
# plot TP and FP ~ min sum frags.
data %>% select(prog, min_sum_frags, TP, FP) %>%
gather(key=pred_class_type, value=pred_class_value, TP, FP) %>%
ggplot(aes(x=min_sum_frags, y=pred_class_value)) + geom_point(aes(group=pred_class_type, color=pred_class_type)) +
facet_wrap(~prog) +
xlim(3,10)
